# Copyright (c) 2005-2008, California Institute of Technology
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: Andrew D. Straw
from __future__ import division

"""
\bibitem{heisenberg_1984}
Heisenberg, M. and Wolf, R., \enquote{Vision in Drosophila: Genetics of
  Microbehavior (Studies of Brain Function)}, Springer Verlag, 1984.
"""

import cgtypes # cgkit 1.x
import numpy
import scipy.sparse
array=numpy.array
from matplotlib import delaunay
from util import get_mean_interommatidial_distance, flatten_cubemap, \
     make_receptor_sensitivities,  make_repr_able, save_as_python, cube_order
import sys, os, csv

# These data are the coordinates of the ommatidial axes as
# hand-clicked on the Heisenberg/Buchner figure. See the
# trace_buchner_1971.py script for the GUI that was used to create
# these data.
x= array([  2.16797119e+00,   2.18880130e+00,   2.20731694e+00,
         2.18880130e+00,   2.22583258e+00,   2.20963140e+00,
         2.26749279e+00,   1.96800808e+00,   1.97118504e+00,
         1.99024682e+00,   2.00930859e+00,   2.06967089e+00,
         2.04425519e+00,   2.08555570e+00,   2.06331696e+00,
         2.04425519e+00,   2.13003318e+00,   1.98706985e+00,
         2.08555570e+00,   2.06014000e+00,   2.18721852e+00,
         2.26981955e+00,   1.92035363e+00,   1.92353060e+00,
         2.10461748e+00,   1.76785941e+00,   2.12900000e+00,
         1.42800000e+00,   2.18451003e+00,   1.96468333e+00,
         1.78786620e+00,   1.98379870e+00,   1.98618812e+00,
         1.80459215e+00,   1.64450096e+00,   1.60149139e+00,
         1.46529441e+00,   1.48440978e+00,   1.66122691e+00,
         1.32670801e+00,   1.28608786e+00,   1.10927073e+00,
         8.82275768e-01,   1.82349160e+00,   1.80350622e+00,
         1.08598418e+00,   8.46172150e-01,   6.24183985e-01,
         6.87377696e-01,   5.05898320e-01,   3.21178241e-01,
         1.99651874e-01,   3.81131249e-01,   5.60990274e-01,
         7.23025431e-01,   9.43393245e-01,   1.10542840e+00,
         1.30635200e+00,   1.46676680e+00,   1.82146130e+00,
         1.78524203e+00,   1.74660814e+00,   1.56792638e+00,
         1.46651242e+00,   1.32887918e+00,   1.24678216e+00,
         1.06327117e+00,   9.03906365e-01,   1.00532033e+00,
         1.16468514e+00,   1.20814826e+00,   1.32646456e+00,
         1.42787853e+00,   1.60897490e+00,   1.67175497e+00,
         1.48824398e+00,   1.52446326e+00,   1.68382806e+00,
         1.82387592e+00,   1.68141344e+00,   1.84802210e+00,
         1.72487657e+00,   1.86733905e+00,   1.74419352e+00,
         1.89389985e+00,   1.76833970e+00,   1.93011912e+00,
         1.76592508e+00,   1.90329136e+00,   1.80299960e+00,
         1.92239455e+00,   1.80299960e+00,   1.92478245e+00,
         1.80538750e+00,   1.86508498e+00,   1.90090346e+00,
         1.70748364e+00,   1.66450146e+00,   1.60719188e+00,
         1.62390717e+00,   1.46391794e+00,   1.48302113e+00,
         1.60849674e+00,   1.28846356e+00,   1.14602105e+00,
         1.16267018e+00,   1.32731152e+00,   1.30881249e+00,
         1.29031346e+00,   1.46790413e+00,   1.42905617e+00,
         1.54375014e+00,   1.38280860e+00,   1.54744995e+00,
         1.40500743e+00,   1.52895092e+00,   1.40500743e+00,
         1.56594897e+00,   1.66029401e+00,   1.68619265e+00,
         1.52525111e+00,   1.38465850e+00,   1.28846356e+00,
         1.16636998e+00,   1.29031346e+00,   1.31066239e+00,
         1.16452008e+00,   1.16636998e+00,   1.26071502e+00,
         1.26811463e+00,   1.16452008e+00,   1.12197231e+00,
         1.14232125e+00,   1.02577737e+00,   1.16082027e+00,
         1.02762728e+00,   9.85079512e-01,   8.03789044e-01,
         6.83545366e-01,   8.46336807e-01,   8.87034667e-01,
         9.07383597e-01,   9.25882625e-01,   1.02392747e+00,
         1.02577737e+00,   9.22182819e-01,   9.48081457e-01,
         1.04427640e+00,   1.04427640e+00,   9.44381652e-01,
         1.04797621e+00,   1.04427640e+00,   1.14047134e+00,
         1.04612630e+00,   9.22182819e-01,   8.05638946e-01,
         8.22288071e-01,   8.18588266e-01,   7.24243226e-01,
         8.25987877e-01,   7.22393323e-01,   8.05638946e-01,
         7.02044393e-01,   8.22288071e-01,   7.05744199e-01,
         8.09338752e-01,   7.64941086e-01,   6.66896241e-01,
         6.24348478e-01,   7.05744199e-01,   5.61451785e-01,
         5.42952757e-01,   4.41208107e-01,   4.83755870e-01,
         5.44802660e-01,   5.63301688e-01,   5.83650618e-01,
         6.03999548e-01,   6.02149645e-01,   6.24348478e-01,
         6.00299742e-01,   7.05744199e-01,   6.02149645e-01,
         7.24243226e-01,   5.24453730e-01,   4.02360149e-01,
         5.02254897e-01,   5.02254897e-01,   3.98660344e-01,
         4.00510247e-01,   4.96705189e-01,   3.80161316e-01,
         4.98555092e-01,   3.82011219e-01,   3.59812386e-01,
         4.65256842e-01,   3.19114526e-01,   4.44907912e-01,
         3.02465401e-01,   3.82011219e-01,   3.41313359e-01,
         2.82116471e-01,   1.95171042e-01,   2.39568708e-01,
         1.82221723e-01,   2.19219778e-01,   2.58067736e-01,
         2.61767541e-01,   1.78521918e-01,   1.80371821e-01,
         2.76566763e-01,   2.98765596e-01,   1.98870848e-01,
         2.95065790e-01,   1.95171042e-01,   2.96915693e-01,
         4.42285327e-01,   1.64641158e+00,   1.50860546e+00,
         1.26580422e+00,   1.14549730e+00,   9.00508652e-01,
         8.21762302e-01,   6.05209841e-01,   4.21468358e-01,
         2.00541099e-01,   1.02108162e-01,   1.02108162e-01,
         8.46089733e-02,   6.05475886e-02,   5.83601900e-02,
         1.63355323e-01,   3.99716077e-02,  -1.58855600e-02,
         9.58287754e-02,   3.02070625e-01,   1.77466174e-01,
         1.30126079e-03,   8.29386598e-02,   2.20433226e-01,
         3.23554151e-01,   4.43861897e-01,   6.11433400e-01,
         4.82532244e-01,   3.79411319e-01,   6.62993863e-01,
         8.09081840e-01,   9.59466522e-01,   3.22923913e-01,
         4.02221279e-01,   5.02204915e-01,   4.84966357e-01,
         5.98740838e-01,   7.05619897e-01,   7.05619897e-01,
         8.02155821e-01,   9.09034880e-01,   1.00557080e+00,
         1.02625707e+00,   1.12624071e+00,   1.22967206e+00,
         1.24691061e+00,   1.37102823e+00,   1.35034196e+00,
         1.48825042e+00,   1.62615889e+00,   1.60892033e+00,
         1.46756415e+00,   1.46411644e+00,   1.60892033e+00,
         1.59168177e+00,   1.33310340e+00,   1.32965569e+00,
         1.22967206e+00,   1.10555444e+00,   1.10210673e+00,
         1.00557080e+00,   9.05587168e-01,   9.05587168e-01,
         8.05603533e-01,   7.67678705e-01,   6.84933628e-01,
         5.88397704e-01,   5.64263723e-01,   4.60832376e-01,
         3.78087298e-01,   3.64296452e-01,   2.78103663e-01,
         2.40178835e-01,   1.64329181e-01,   6.08978338e-02,
         4.71069875e-02,  -5.97720711e-02,  -9.76968983e-02,
        -1.76994264e-01,  -2.73530188e-01,  -2.97664169e-01,
        -3.21798150e-01,  -2.11471380e-01,  -2.39053073e-01,
        -1.18383168e-01,  -1.16097443e-03,   1.05718084e-01,
         1.22956642e-01,   2.22940278e-01,   3.40162471e-01,
         3.02237644e-01,   4.43593818e-01,   4.60832376e-01,
         5.50472876e-01,   6.43561089e-01,   6.47008800e-01,
         7.50440147e-01,   8.64214629e-01,   8.46976071e-01,
         9.64198265e-01,   1.08142046e+00,   1.06762961e+00,
         1.20898579e+00,   1.20898579e+00,   1.33310340e+00,
         1.28828315e+00,   1.41240077e+00,   1.46411644e+00,
         1.56754779e+00,   6.24150305e-02,   1.37555794e-01,
         1.83176972e-01,   2.61001334e-01,   4.00548466e-01,
         5.26677604e-01,   4.78372828e-01,   6.01818367e-01,
         7.27947506e-01,   6.87693526e-01,   8.08455467e-01,
         9.29217408e-01,   8.86279829e-01,   9.77522184e-01,
         1.13048731e+00,   1.08486613e+00,   1.23514766e+00,
         1.38811278e+00,   1.33175721e+00,   1.24588205e+00,
         1.17074129e+00,   1.13048731e+00,   9.85572980e-01,
         1.04729575e+00,   9.66787790e-01,   9.26533809e-01,
         8.43342250e-01,   7.25263907e-01,   7.65517888e-01,
         6.23287157e-01,   5.64247986e-01,   4.81056426e-01,
         4.19333656e-01,   3.38825696e-01,   2.82470123e-01,
         2.23430952e-01,   7.85166226e-02,   2.48446488e-02,
        -2.07765290e-02,  -7.44485028e-02,  -1.36171273e-01,
        -2.19362832e-01,  -8.24992989e-02,  -2.35464424e-01,
        -1.79108852e-01,   6.92260566e-04,   3.82626422e-02,
         1.18770603e-01,   2.39532544e-01,   3.57610887e-01,
         3.01255314e-01,   4.78372828e-01,   5.64247986e-01,
         6.42072348e-01,   7.86986677e-01,   7.06478716e-01,
         8.46025848e-01,   7.68201486e-01,   9.23850210e-01,
         1.06608094e+00,   8.48709447e-01,   7.06478716e-01,
         6.23287157e-01,   4.78372828e-01,   5.64247986e-01,
         4.19333656e-01,   3.60294485e-01,   2.82470123e-01,
         2.39532544e-01,   1.80493373e-01,   1.21454202e-01,
         5.70478331e-02,  -3.95617198e-02,  -9.86008910e-02,
        -1.57640062e-01,  -2.19362832e-01,  -2.94503596e-01,
        -3.58909964e-01,  -4.52835918e-01,  -5.14558688e-01,
        -3.93796747e-01,  -2.38148023e-01,  -2.00577641e-01,
        -1.20069681e-01,  -1.01284490e-01,  -4.67493682e-03,
         5.97314318e-02,   1.53657386e-01,   2.04645761e-01,
         3.17356906e-01,   2.08307404e+00,   1.75997283e+00,
         1.61423884e-01,  -4.26953769e-02,   9.66241184e-02,
         9.01441418e-02,   1.90583778e-01,   2.84543437e-01,
         1.41069861e-01,   6.19615910e-02,   8.39361105e-02,
         4.43819753e-02,   1.36674957e-01,   8.39361105e-02,
         1.19095342e-01,   1.80125519e-02,   1.00247103e+00,
         1.39716974e-01,   3.92714085e-02,   1.81076912e-01,
         1.55473141e-01,   2.55918706e-01,   3.38638583e-01,
         3.38638583e-01,   3.78029000e-01,   4.58779357e-01,
         5.19834504e-01,   5.39529713e-01,   6.00584860e-01,
         6.63609529e-01,   7.69394981e-01,  -8.46293184e-02,
        -1.79555097e-01,  -2.97393994e-01,  -1.95921610e-01,
        -3.17033810e-01,  -4.34872707e-01,  -3.36673626e-01,
        -4.74152340e-01,  -5.36345091e-01,  -6.24724264e-01,
        -7.16376739e-01,  -8.01482610e-01,  -1.04698031e+00,
        -1.16481921e+00,  -8.76768572e-01,  -9.42234626e-01,
        -8.44035545e-01,  -7.52383069e-01,  -6.96736923e-01,
        -5.75624723e-01,  -6.54183988e-01,  -4.93792156e-01,
        -4.21779496e-01,  -3.56313442e-01,  -2.81027480e-01,
        -3.17033810e-01,  -3.75953259e-01,  -4.54512523e-01,
        -5.33071788e-01,  -5.72351421e-01,  -6.54183988e-01,
        -7.52383069e-01,  -8.37488939e-01,  -8.99681691e-01,
        -9.74967653e-01,  -1.01752059e+00,  -1.08625994e+00,
        -1.15827260e+00,  -1.07644004e+00,  -1.11571967e+00,
        -1.02079389e+00,  -9.55327837e-01,  -8.53855453e-01,
        -8.34215637e-01,  -7.36016556e-01,  -6.77097107e-01,
        -5.75624723e-01,  -4.11959588e-01,  -2.58114361e-01,
        -3.20307113e-01,  -1.79555097e-01,  -6.17161995e-02,
        -1.37002162e-01,   9.23348032e-01,   7.23993776e-01,
         5.01637107e-01,  -9.16980188e-01,  -7.53169710e-01,
        -6.21624931e-01,  -4.57814453e-01,  -3.56053398e-01,
        -4.55332476e-01,  -5.54611554e-01,  -6.14179001e-01,
        -6.93602263e-01,  -7.53169710e-01,  -8.57412741e-01,
        -9.36836003e-01,  -1.01874124e+00,  -1.05597090e+00,
        -1.13787614e+00,  -1.23963719e+00,  -1.23963719e+00,
        -1.11802032e+00,  -9.54209842e-01,  -7.95363318e-01,
        -6.56372609e-01,  -5.12417946e-01,  -4.13138868e-01,
        -3.95765029e-01,  -6.14179001e-01,  -7.73025525e-01,
        -9.14498211e-01,  -1.07582671e+00,  -1.23963719e+00,
        -1.17510579e+00,  -1.01129531e+00,  -8.74786580e-01,
        -7.15940055e-01,  -2.09865108e-02,  -2.09865108e-02,
        -1.17783612e-01,  -2.34436528e-01,  -3.31233629e-01,
        -4.55332476e-01,  -4.77670269e-01,  -5.74467369e-01,
        -5.94323185e-01,  -6.96084240e-01,  -8.42520880e-01,
        -8.57412741e-01,  -9.76547635e-01,  -9.96403450e-01,
        -1.11802032e+00,  -1.11802032e+00,  -1.09568253e+00,
        -1.23963719e+00,  -1.23963719e+00,  -1.21729940e+00,
        -1.21978138e+00,  -1.23963719e+00,  -1.12050230e+00,
        -1.09568253e+00,  -1.07830869e+00,  -9.56691819e-01,
        -9.59173796e-01,  -8.35074949e-01,  -8.17701110e-01,
        -6.96084240e-01,  -6.96084240e-01,  -6.98566217e-01,
        -5.76949346e-01,  -5.76949346e-01,  -4.50368522e-01,
        -3.53571421e-01,  -3.33715606e-01,  -2.34436528e-01,
        -2.36918505e-01,  -1.17783612e-01,  -1.22747566e-01,
        -3.83603494e-02,  -1.13069527e-03,  -1.85045339e-02,
        -1.17783612e-01,  -1.17783612e-01,  -3.33963956e-02,
        -2.34436528e-01,  -3.51089444e-01,  -3.56053398e-01,
        -4.75188292e-01,  -4.57814453e-01,  -5.74467369e-01,
        -5.94323185e-01,  -7.35795871e-01,  -8.57412741e-01,
        -8.52448787e-01,  -9.96403450e-01,  -1.01625927e+00,
        -1.15524997e+00,  -1.21729940e+00,  -1.27934882e+00,
        -1.25949301e+00,  -1.19744358e+00,  -1.15524997e+00,
        -1.01377729e+00,  -9.74065658e-01,  -8.54930764e-01,
        -7.70543548e-01,  -6.34034816e-01,  -6.14179001e-01,
        -5.14899923e-01,  -4.75188292e-01,  -3.73427237e-01,
        -4.13138868e-01,  -2.74148159e-01,  -1.74869081e-01,
        -1.42603381e-01,  -4.08423264e-02,  -8.05539575e-02,
        -3.58783725e-02,  -1.15301635e-01,  -2.17062689e-01,
        -2.56774321e-01,  -2.94003975e-01,  -3.31233629e-01,
        -4.32994684e-01,  -5.34755738e-01,  -6.14179001e-01,
        -7.10976101e-01,  -8.92160418e-01,  -2.98947985e-01,
        -4.16146868e-01,  -3.75263537e-01,  -2.96222430e-01,
        -1.98102435e-01,  -1.19061328e-01,  -1.27646668e-02,
        -5.63735534e-02,  -1.19061328e-01,  -2.22632434e-01,
        -2.79869097e-01,  -3.97067980e-01,  -4.95187975e-01,
        -6.12386858e-01,  -5.14266863e-01,  -6.55995745e-01,
        -7.32311296e-01,  -8.14077959e-01,  -7.73194627e-01,
        -6.94153520e-01,  -6.15112413e-01,  -4.95187975e-01,
        -4.54304644e-01,  -3.31654650e-01,  -2.77143542e-01,
        -1.62670215e-01,  -1.13610217e-01,  -1.54902222e-02,
        -5.90991088e-02,  -1.54493548e-01,  -2.14455767e-01,
        -3.09850207e-01,  -4.10695757e-01,  -3.77989092e-01,
        -4.70657976e-01,  -5.74229082e-01,  -4.92462420e-01,
        -6.75074632e-01,  -7.73194627e-01,  -7.92273515e-01,
        -9.12197953e-01,  -8.74040178e-01,  -9.77611283e-01,
        -1.01304350e+00,  -1.11388905e+00,  -1.05392684e+00,
        -9.74885728e-01,  -8.76765733e-01,  -7.89547960e-01,
        -6.94153520e-01,  -1.36043271e+00,  -1.37973726e+00,
        -1.35801964e+00,  -1.33630202e+00,  -1.36043271e+00,
        -1.40145488e+00,  -1.29527984e+00,  -1.35801964e+00,
        -7.37860870e-01,  -8.97123433e-01,  -1.09258203e+00,
         1.74724239e-01,  -1.59523381e-01,  -2.61731332e-01,
        -3.77751167e-01,  -4.99295756e-01,  -9.55087967e-01,
        -5.13107642e-01,  -2.36550146e-01,  -1.34238580e+00,
        -1.55318260e-01,  -5.77702852e-01,  -7.19027020e-01])

y= array([  7.43281164e-01,   5.76640362e-01,   4.37773027e-01,
         2.80390047e-01,   1.34579345e-01,  -2.51180907e-02,
        -1.68614337e-01,   1.12190965e+00,   9.43999729e-01,
         7.81974621e-01,   6.19949514e-01,   4.64278332e-01,
         2.99076262e-01,   1.56112932e-01,   4.41749903e-04,
        -1.23459803e-01,  -2.66423133e-01,  -3.45847205e-01,
        -4.69748758e-01,  -6.12712088e-01,  -4.88810535e-01,
        -6.34950828e-01,  -7.11197938e-01,  -8.50984305e-01,
        -9.14523563e-01,  -8.06506824e-01,   9.20400000e-01,
        -3.21800000e-01,  -1.07411171e+00,  -9.90481984e-01,
        -9.49861832e-01,  -1.16729911e+00,  -1.33216914e+00,
        -1.25092884e+00,  -1.18641448e+00,  -1.36562103e+00,
        -1.45880844e+00,  -1.68819282e+00,  -1.56872179e+00,
        -1.79332733e+00,  -1.58066889e+00,  -1.68819282e+00,
        -1.82438980e+00,  -1.44885031e+00,  -1.11309588e+00,
        -1.94765613e+00,  -2.04325687e+00,  -2.09834883e+00,
        -1.92335086e+00,  -1.98168351e+00,  -2.04325687e+00,
        -1.92983226e+00,  -1.86177750e+00,  -1.79858379e+00,
        -1.70622375e+00,  -1.60576195e+00,  -1.50530015e+00,
        -1.38701449e+00,  -1.29141374e+00,   9.66755788e-01,
         1.14543754e+00,   1.32170467e+00,   1.32653391e+00,
         1.52694722e+00,   1.52211799e+00,   1.67906817e+00,
         1.72253130e+00,   1.73943363e+00,   1.54143493e+00,
         1.54626417e+00,   1.34585085e+00,   1.32411929e+00,
         1.16233987e+00,   1.16475448e+00,   9.83658116e-01,
         1.00297506e+00,   8.70171058e-01,   8.21878693e-01,
         8.02561747e-01,   6.60099270e-01,   6.40782324e-01,
         5.22466029e-01,   4.79002901e-01,   3.80003552e-01,
         3.22052714e-01,   2.20638747e-01,   1.96492565e-01,
         8.54201250e-02,   4.11657829e-02,  -5.91259764e-02,
        -8.06170676e-02,  -1.78520928e-01,  -2.21503110e-01,
        -3.02691677e-01,  -4.29250326e-01,  -5.70136369e-01,
        -5.24766287e-01,  -4.02983437e-01,  -7.42065099e-01,
        -1.03100088e+00,  -9.64139709e-01,  -1.12651684e+00,
        -8.84861961e-01,  -1.20674504e+00,  -1.30663979e+00,
        -1.12534932e+00,  -1.05135321e+00,  -9.05210891e-01,
        -7.70167991e-01,  -8.27514976e-01,  -6.86922367e-01,
        -6.03676744e-01,  -5.40780051e-01,  -4.64934039e-01,
        -4.24236178e-01,  -3.44690361e-01,  -1.94848239e-01,
        -2.42945710e-01,  -2.61444737e-01,  -1.41201059e-01,
        -1.15302421e-01,  -7.83043661e-02,  -1.37501254e-01,
        -2.18896974e-01,  -2.63294640e-01,  -3.81688415e-01,
        -3.40990555e-01,  -4.61234233e-01,  -5.07481802e-01,
        -6.25875577e-01,  -5.85177717e-01,  -7.07271298e-01,
        -8.25665073e-01,  -8.86711863e-01,  -9.64407778e-01,
        -1.04580350e+00,  -1.22524406e+00,  -1.30848969e+00,
        -1.22709397e+00,  -1.14384834e+00,  -9.68107584e-01,
        -8.27514976e-01,  -7.05421395e-01,  -7.46119255e-01,
        -6.46224507e-01,  -5.85177717e-01,  -4.83433066e-01,
        -5.25980829e-01,  -4.05737151e-01,  -3.61339485e-01,
        -2.98442792e-01,  -1.81898920e-01,  -1.00503199e-01,
        -6.16552415e-02,  -1.41201059e-01,  -8.01542689e-02,
        -1.96698141e-01,  -3.20641625e-01,  -3.61339485e-01,
        -4.26086081e-01,  -4.83433066e-01,  -5.44479856e-01,
        -5.87027619e-01,  -6.46224507e-01,  -7.09121200e-01,
        -7.66468185e-01,  -8.84861961e-01,  -8.31214781e-01,
        -9.64407778e-01,  -1.04765340e+00,  -1.12534932e+00,
        -1.31218949e+00,  -1.20304523e+00,  -1.04765340e+00,
        -8.84861961e-01,  -7.68318088e-01,  -6.44374604e-01,
        -5.44479856e-01,  -4.22386276e-01,  -3.18791722e-01,
        -2.02247850e-01,  -1.59700087e-01,  -1.19002226e-01,
        -4.31562141e-02,  -6.16552415e-02,  -1.20852129e-01,
        -1.59700087e-01,  -2.63294640e-01,  -2.18896974e-01,
        -3.22491528e-01,  -3.79838513e-01,  -4.24236178e-01,
        -4.85282969e-01,  -5.22281024e-01,  -6.46224507e-01,
        -7.07271298e-01,  -7.46119255e-01,  -8.27514976e-01,
        -8.86711863e-01,  -9.66257681e-01,  -1.12534932e+00,
        -1.26594192e+00,  -1.18824601e+00,  -1.02360467e+00,
        -8.25665073e-01,  -6.83222562e-01,  -5.68528592e-01,
        -4.61234233e-01,  -4.27935984e-01,  -3.20641625e-01,
        -3.65039291e-01,  -2.63294640e-01,  -2.22596780e-01,
        -1.80049017e-01,  -1.35651351e-01,  -8.38540743e-02,
         1.12112459e+00,  -2.14164527e-02,   2.45189179e-02,
        -1.92290541e-02,   2.45189179e-02,  -1.92290541e-02,
         2.45189179e-02,   4.57533311e-04,  -2.14164527e-02,
        -4.54778373e-02,  -9.57880052e-02,  -1.78909152e-01,
        -2.77342089e-01,  -3.84524621e-01,  -4.61083572e-01,
        -5.07018943e-01,  -1.95712284e+00,  -1.88407885e+00,
        -1.79384804e+00,  -1.75517769e+00,  -1.63486995e+00,
        -1.67354030e+00,  -1.51456220e+00,  -1.45870503e+00,
        -1.55752925e+00,  -1.67783700e+00,  -1.60479301e+00,
        -1.50167209e+00,  -1.37706764e+00,  -1.40714457e+00,
        -1.50596879e+00,  -1.40284787e+00,   2.04599525e-02,
         8.25187608e-02,   4.11462219e-02,   1.37682146e-01,
         1.03205030e-01,   6.18324913e-02,   1.75606973e-01,
         1.44577569e-01,   1.03205030e-01,   6.52802029e-02,
         1.79054685e-01,   1.41129857e-01,   2.20427223e-01,
         1.06652742e-01,   5.83847798e-02,   1.79054685e-01,
         1.41129857e-01,   9.97573186e-02,   2.68695185e-01,
         2.85933743e-01,   4.47976187e-01,   4.03155937e-01,
         5.68646092e-01,   3.27306282e-01,   4.65214745e-01,
         3.61783398e-01,   2.61799762e-01,   4.03155937e-01,
         3.03172301e-01,   3.47992552e-01,   2.27322647e-01,
         2.37665781e-01,   3.85917379e-01,   3.03172301e-01,
         2.20427223e-01,   3.44544840e-01,   2.65247474e-01,
         1.79054685e-01,   3.03172301e-01,   2.16979512e-01,
         3.44544840e-01,   2.58352051e-01,   1.99740954e-01,
         3.03172301e-01,   2.37665781e-01,   3.44544840e-01,
         2.85933743e-01,   2.37665781e-01,   3.16963147e-01,
         4.23842206e-01,   3.99708225e-01,   4.99691861e-01,
         4.65214745e-01,   4.23842206e-01,   5.03139572e-01,
         3.85917379e-01,   4.61767033e-01,   4.20394494e-01,
         5.37616688e-01,   5.03139572e-01,   3.96260513e-01,
         4.44528475e-01,   4.20394494e-01,   5.37616688e-01,
         5.06587284e-01,   4.65214745e-01,   6.20361765e-01,
         5.65198380e-01,   5.41064399e-01,   6.89315997e-01,
         5.03139572e-01,   6.65182016e-01,   6.20361765e-01,
         7.47927093e-01,   7.27240824e-01,   5.82436938e-01,
         6.82420574e-01,   6.20004576e-01,   7.03196135e-01,
         5.79750595e-01,   6.62942155e-01,   6.20004576e-01,
         5.79750595e-01,   7.24664925e-01,   6.81727346e-01,
         6.41473365e-01,   7.83704096e-01,   7.43450116e-01,
         7.24664925e-01,   8.45426866e-01,   8.21274478e-01,
         7.86387695e-01,   9.42036419e-01,   9.28618425e-01,
         8.85680846e-01,   1.04669677e+00,   1.18624390e+00,
         1.06548196e+00,   1.20771269e+00,   1.22381428e+00,
         1.08695075e+00,   9.84973998e-01,   1.12452113e+00,
         1.00644279e+00,   1.04669677e+00,   8.88364445e-01,
         9.31302024e-01,   8.21274478e-01,   9.63505208e-01,
         8.61528458e-01,   7.67602504e-01,   9.07149636e-01,
         8.02489287e-01,   8.23958076e-01,   7.43450116e-01,
         8.64212057e-01,   7.78336899e-01,   9.01782438e-01,
         8.23958076e-01,   9.82290399e-01,   1.02522798e+00,
         1.12183753e+00,   1.08158355e+00,   9.47403616e-01,
         1.06548196e+00,   1.04132957e+00,   1.00107559e+00,
         1.14062272e+00,   1.22381428e+00,   1.08426715e+00,
         1.19966189e+00,   1.14330632e+00,   1.30432224e+00,
         1.26138466e+00,   1.42240058e+00,   1.38483020e+00,
         1.36336141e+00,   1.58341651e+00,   1.59951810e+00,
         1.48412335e+00,   1.52169374e+00,   1.34457622e+00,
         1.40361539e+00,   1.25870106e+00,   1.44118578e+00,
         1.30163864e+00,   1.18356030e+00,   1.32042383e+00,
         1.18356030e+00,   1.31505664e+00,   1.20234549e+00,
         1.31774024e+00,   1.21844708e+00,   1.35799422e+00,
         1.25601747e+00,   1.41703339e+00,   1.31505664e+00,
         1.55926412e+00,   1.47607256e+00,   1.63708848e+00,
         1.47338896e+00,   1.61561969e+00,   1.45997097e+00,
         1.60220170e+00,   1.46265456e+00,   1.58073291e+00,
         1.55926412e+00,  -7.52362393e-01,  -6.46905750e-01,
         9.27773511e-01,   5.42214908e-01,   1.04816493e-01,
         7.61684502e-03,   7.56565985e-02,   1.17776446e-01,
        -1.34765171e+00,  -1.25975363e+00,  -1.10593199e+00,
        -8.81791894e-01,  -9.38925644e-01,  -7.58734584e-01,
        -6.22492563e-01,  -5.82938428e-01,   4.49863991e-01,
         1.75908530e+00,   2.01118398e+00,   1.89695177e+00,
         2.01709254e+00,   1.73348153e+00,   1.85559183e+00,
         2.01512302e+00,   1.69803016e+00,   1.83589662e+00,
         1.97573260e+00,   1.66060926e+00,   1.79847572e+00,
         1.97376308e+00,   1.78515549e+00,   1.78158834e+00,
         1.89942724e+00,   1.91579375e+00,   1.77504173e+00,
         1.78158834e+00,   1.81759467e+00,   1.67356935e+00,
         1.69975577e+00,   1.60155669e+00,   1.48044449e+00,
         1.65392953e+00,   1.55573045e+00,   1.47389788e+00,
         1.33314587e+00,   1.43789155e+00,   1.32005266e+00,
         1.15966083e+00,   1.25458660e+00,   1.35278568e+00,
         1.22185358e+00,   1.14002101e+00,   1.09746807e+00,
         1.17930064e+00,   1.06146174e+00,   1.14656761e+00,
         9.40349544e-01,   8.61790279e-01,   9.86175782e-01,
         9.01069912e-01,   1.02218211e+00,   9.40349544e-01,
         1.04182193e+00,   9.63262663e-01,   1.08110156e+00,
         9.95995690e-01,   1.19894046e+00,   1.11710789e+00,
         1.01563551e+00,   9.17436425e-01,   7.40678079e-01,
         8.19237344e-01,   7.04671750e-01,   7.83231015e-01,
         6.81758631e-01,   7.43951382e-01,   6.19565880e-01,
         7.01398447e-01,   6.62118815e-01,   6.22839182e-01,
         7.40678079e-01,   7.01398447e-01,   6.62118815e-01,
         5.86832853e-01,  -2.53936674e-01,  -2.61604145e-01,
        -5.79804206e-01,   8.97404311e-01,   8.60174657e-01,
         8.40318841e-01,   7.75787440e-01,   5.39999631e-01,
         4.63058345e-01,   4.03490899e-01,   4.97806023e-01,
         4.43202530e-01,   5.57373469e-01,   4.75468230e-01,
         5.97085100e-01,   5.17661838e-01,   6.19422893e-01,
         5.57373469e-01,   6.59134524e-01,   5.00288000e-01,
         4.77950207e-01,   4.38238576e-01,   3.78671129e-01,
         3.41441475e-01,   2.96765890e-01,   3.61297291e-01,
         2.64500190e-01,   2.42162397e-01,   2.76910075e-01,
         3.16621706e-01,   3.58815314e-01,   3.98526945e-01,
         2.96765890e-01,   2.54572282e-01,   2.22306582e-01,
         2.02450766e-01,   1.42883320e-01,   4.36042417e-02,
         1.00689711e-01,   4.36042417e-02,   8.33158728e-02,
         2.12664492e-02,   1.20545527e-01,   5.84961034e-02,
         1.57775181e-01,   1.00689711e-01,   3.86402878e-02,
         1.40401343e-01,   8.08338959e-02,   1.75149020e-01,
         1.97486812e-01,   1.23027504e-01,   4.11222648e-02,
         1.60257158e-01,   8.08338959e-02,  -1.07134327e-03,
        -8.29765824e-02,  -1.79773683e-01,  -2.19485314e-01,
        -1.40062052e-01,  -4.57469283e-02,  -1.02832398e-01,
        -1.79773683e-01,  -6.31207669e-02,  -1.40062052e-01,
        -1.84737637e-01,  -1.00350421e-01,   1.41063367e-03,
        -4.07829744e-02,  -1.37580075e-01,  -8.04946055e-02,
        -1.84451819e-02,  -1.20206237e-01,  -5.81568130e-02,
        -1.54953914e-01,  -2.09271588e-02,  -9.53864672e-02,
        -4.07829744e-02,  -1.40062052e-01,  -2.41823107e-01,
        -1.99629499e-01,  -2.98908577e-01,  -3.18764392e-01,
        -2.61678922e-01,  -3.23728346e-01,  -2.19485314e-01,
        -2.61678922e-01,  -1.79773683e-01,  -2.19485314e-01,
        -3.41102185e-01,  -2.81534738e-01,  -2.41823107e-01,
        -3.41102185e-01,  -2.76570784e-01,  -3.83295793e-01,
        -3.21246369e-01,  -4.47827193e-01,  -2.79052761e-01,
        -5.47106271e-01,  -7.05952796e-01,  -5.84335925e-01,
        -6.61277211e-01,  -5.64480110e-01,  -6.31493487e-01,
        -4.99948709e-01,  -5.44624294e-01,  -4.40381262e-01,
        -4.85056847e-01,  -3.85777770e-01,  -4.23007424e-01,
        -5.24768479e-01,  -4.65201032e-01,  -5.02430686e-01,
        -3.83295793e-01,  -4.23007424e-01,  -5.42142317e-01,
        -7.05952796e-01,  -6.43903372e-01,  -6.04191741e-01,
        -7.28290588e-01,  -5.66962087e-01,  -6.86096980e-01,
        -6.41421395e-01,  -6.04191741e-01,  -7.25808611e-01,
        -6.61277211e-01,  -7.25808611e-01,  -1.76048496e+00,
        -1.65963941e+00,  -1.53698942e+00,  -1.61875608e+00,
        -1.47975275e+00,  -1.55879386e+00,  -1.42251609e+00,
        -1.16086277e+00,  -1.34074943e+00,  -1.23990388e+00,
        -1.40343720e+00,  -1.30259165e+00,  -1.43886942e+00,
        -1.36527943e+00,  -1.58059830e+00,  -1.45794831e+00,
        -1.40343720e+00,  -1.32439609e+00,  -1.22082499e+00,
        -1.30259165e+00,  -1.16086277e+00,  -1.24262943e+00,
        -1.10362611e+00,  -1.18539277e+00,  -1.02185944e+00,
        -1.10635166e+00,  -9.64622780e-01,  -1.02731055e+00,
        -8.25619453e-01,  -7.62931679e-01,  -9.04660560e-01,
        -8.41972786e-01,  -8.01089455e-01,  -9.64622780e-01,
        -9.23739448e-01,  -8.63777229e-01,  -7.62931679e-01,
        -1.00550611e+00,  -9.45543892e-01,  -1.03821278e+00,
        -9.80976112e-01,  -1.16358832e+00,  -1.08454722e+00,
        -9.26465004e-01,  -8.63777229e-01,  -7.82010567e-01,
        -8.25619453e-01,  -8.82856117e-01,  -7.87461678e-01,
        -8.22893898e-01,  -3.77987419e-01,  -2.18724856e-01,
        -1.24615160e-01,  -4.25708089e-02,   1.02213339e-01,
         1.77018483e-01,   2.34932142e-01,   3.19389562e-01,
        -3.82813558e-01,  -4.43140286e-01,  -4.98640876e-01,
         1.75506569e-01,   1.83793700e-01,   1.42358045e-01,
         1.56169930e-01,   2.08655093e-01,  -1.28556098e-03,
         5.78813616e-01,  -3.64668683e-01,   3.87718335e-02,
        -1.72048897e+00,  -1.04403846e+00,  -1.10596702e+00])


###########################################################

def get_rot_mat(theta,x,y,z):
    # see http://en.wikipedia.org/wiki/Rotation_matrix
    cos = numpy.cos(theta)
    sin = numpy.sin(theta)
    M = numpy.array([[cos+(1-cos)*x**2, (1-cos)*x*y+sin*z, (1-cos)*x*z-sin*y],
                     [(1-cos)*y*x-sin*z, cos+(1-cos)*y**2, (1-cos)*y*z+sin*x],
                     [(1-cos)*z*x+sin*y, (1-cos)*z*y-sin*x, cos+(1-cos)*z**2]])
    return M
def long_lat2xyz(long,lat,R=1.0):
    sin,cos,pi = numpy.sin, numpy.cos, numpy.pi

    colat = pi/2 - lat

    x3 = R*sin(colat)*cos(long)
    y3 = R*sin(colat)*sin(long)
    z3 = R*cos(colat)
    return x3,y3,z3

def xyz2long_lat(xn,yn,zn):
    rho = numpy.sqrt( xn**2 + yn**2 + zn**2 )
    longn = numpy.arctan2(yn,xn)
    colatn = numpy.arctan2( numpy.sqrt(xn**2 + yn**2), zn )

    latn = numpy.pi/2-colatn
    return longn, latn, rho

class LongLatRotator:
    def __init__(self,rotmatrix):
        self.rotmatrix = rotmatrix
    def __call__(self,long,lat,R=1.0):
        x3,y3,z3 = long_lat2xyz(long,lat,R)

        # next, transform to new 3D cartesian
        M = self.rotmatrix
        xn = M[0,0]*x3 + M[0,1]*y3 + M[0,2]*z3
        yn = M[1,0]*x3 + M[1,1]*y3 + M[1,2]*z3
        zn = M[2,0]*x3 + M[2,1]*y3 + M[2,2]*z3

        # finally, transform back to long, lat
        longn, latn, rho = xyz2long_lat(xn,yn,zn)
        return longn,latn,rho

def xform_long_lat_2_stereographic(long,lat,R=1.0):
    theta_P = long
    rho_P = 2*R*numpy.tan((numpy.pi/2-lat)/2.0)

    x=rho_P*numpy.cos(theta_P)
    y=rho_P*numpy.sin(theta_P)

    return x,y

def xform_stereographic_2_long_lat(x,y,R=1.0):
    x=numpy.asarray(x)
    y=numpy.asarray(y)
    R=numpy.asarray(R)
    # convert to 2D polar
    rho = numpy.sqrt(x**2+y**2)
    theta = numpy.arctan2(y,x)

    # convert to spherical
    colat = 2*numpy.arctan(rho/(2*R))
    lat = numpy.pi/2-colat

    long = theta

    return long, lat, R

###########################################################
def voronoi( tri ):
    return numpy.array(
        [(tri.circumcenters[i], tri.circumcenters[j])
         for i in xrange(len(tri.circumcenters))
         for j in tri.triangle_neighbors[i] if j != -1])

def my_voronoi( tri, verts_x, verts_y ):
    all_ordered_tri_idxs=[]
    for idx in range(len(verts_x)):
        #x,y = verts_x[i], verts_y[i]
##        if idx!=32:
##            continue
        print 'idx',idx

        # Find all triangles around this vertex
        my_tri_idxs = []
        for test_tri_idx,test_tri in enumerate(tri.triangle_nodes):
            for test_idx in test_tri:
                if test_idx==idx:
                    my_tri_idxs.append(test_tri_idx)
                    break
        #print len(my_tri_idxs)
        ### ok, we found all Delaunay triangles this vert shares.

        # Now, sort triangles into ordered list. Insert first tri.
        ordered_tri_idxs = []
        test_idx_idx = -1
        while len(my_tri_idxs):
            test_idx_idx = (test_idx_idx+1)%len(my_tri_idxs)
            test_idx = my_tri_idxs[test_idx_idx]

            #print 'test_idx_idx,test_idx',test_idx_idx,test_idx
            #print 'ordered_tri_idxs',ordered_tri_idxs

            if not len(ordered_tri_idxs):
                ordered_tri_idxs.append( my_tri_idxs[test_idx_idx] )
                del my_tri_idxs[test_idx_idx]
                continue

            #print 'neighbors',tri.triangle_neighbors[test_idx]
            for neighbor_idx in tri.triangle_neighbors[test_idx]:
                if neighbor_idx == ordered_tri_idxs[0]:
                    ordered_tri_idxs.insert(0,test_idx)
                    del my_tri_idxs[test_idx_idx]
                    break
                if neighbor_idx == ordered_tri_idxs[-1]:
                    ordered_tri_idxs.append(test_idx)
                    del my_tri_idxs[test_idx_idx]
                    break
                # nothing... continue

        assert len(ordered_tri_idxs)>1

        # check if endpoints are neighbors
        first_idx = ordered_tri_idxs[0]
        last_idx = ordered_tri_idxs[-1]
        neighbor_idxs = tri.triangle_neighbors[first_idx]
        if last_idx not in neighbor_idxs:
            ordered_tri_idxs.append(-1)

        #print ordered_tri_idxs
        #for oti in ordered_tri_idxs:
            #print oti,':',tri.triangle_nodes[oti]

        # Now we have ordered list of bordering triangles.
        # We know that each triangle is numbered CCW

        all_ordered_tri_idxs.append( ordered_tri_idxs )

    return all_ordered_tri_idxs

## plot 2D data ###################
def plot_stuff():
    import pylab
    pylab.plot(x,y,'ko')
    for tn in tri.triangle_nodes:
        a,b,c=tn[0],tn[1],tn[2]
        tx = x[a],x[b],x[c],x[a]
        ty = y[a],y[b],y[c],y[a]
        pylab.plot(tx,ty,'b-')

    if 0:
        for tn in tri.edge_db:
            a,b=tn[0],tn[1]
            tx = x[a],x[b]
            ty = y[a],y[b]
            pylab.plot(tx,ty,'r-')

    if 0:
        xhull,yhull = list(x[tri.hull]), list(y[tri.hull])
        xhull += [xhull[0]]
        yhull += [yhull[0]]
        pylab.plot(xhull,yhull,'g:',lw=4)

    if 0:
        mv = voronoi(tri)
        print 'mv.shape',mv.shape
        print 'mv[0]',mv[0]
        for i in range(len(mv)):
            pylab.plot( mv[i,:,0], mv[i,:,1], 'r-x' )

    if 1:
        ax = pylab.gca()
        for i,hfi in enumerate(hex_faces_idx):
            ax.plot([x[i]],[y[i]],'r-x')
            txi = [x[ii] for ii in hfi]
            tyi = [y[ii] for ii in hfi]
            ax.plot(txi,tyi,'r-o')

    if 1:
        for i in range(len(x)):
            ax.text(x[i],y[i],'%d'%i)

    pylab.setp(pylab.gca(),'aspect','equal')
    pylab.show()

###########################################################
def main():
    Mforward = get_rot_mat(-numpy.pi/2,1,0,0)
    scale = numpy.eye(3)
    scale[2,2]=-1
    Mforward = numpy.dot(Mforward,scale)
    xform_my_long_lat_2_heisenberg = LongLatRotator(Mforward)
    Mreverse = numpy.linalg.inv(Mforward)
    xform_heisenberg_long_lat_2_my = LongLatRotator(Mreverse)

    ## triangulate data ###############################

    left_tri = delaunay.Triangulation(x, y)

    ## transform data to long & lat ###################
    hlong,hlat,hR = xform_stereographic_2_long_lat(x,y)
    long,lat,R = xform_heisenberg_long_lat_2_my(hlong,hlat,hR)

    ## put in form similar to output of make_receptor_info #
    left_receptor_dirs = numpy.asarray(long_lat2xyz(long,lat,R))
    left_receptor_dirs = numpy.transpose( left_receptor_dirs )
    left_receptor_dirs = [cgtypes.vec3(v) for v in left_receptor_dirs]
    left_triangles = left_tri.triangle_nodes
    left_ordered_tri_idxs = my_voronoi(left_tri,x,y)
    left_hex_faces = []
    for center_vert_idx in range(len(left_receptor_dirs)):
        center_vert = left_receptor_dirs[center_vert_idx]
        this_ordered_tri_idxs = left_ordered_tri_idxs[center_vert_idx]
        this_face = []
        for tri_idx in this_ordered_tri_idxs:
            if tri_idx == -1:
                this_vert = center_vert
            else:
                nodes = left_triangles[tri_idx]
                this_vert = (left_receptor_dirs[int(nodes[0])]+
                             left_receptor_dirs[int(nodes[1])]+
                             left_receptor_dirs[int(nodes[2])])*(1.0/3.0)
            this_face.append(this_vert)
        left_hex_faces.append(this_face)

    ###############################
    # duplicate for right eye

    right_receptor_dirs = [cgtypes.vec3((v.x,-v.y,v.z)) for v in left_receptor_dirs]
    receptor_dirs = left_receptor_dirs + right_receptor_dirs

    right_idx_offset = len(left_receptor_dirs)

    right_triangles = []
    for tri in left_triangles:
        newtri = []
        for idx in tri:
            newtri.append( idx+right_idx_offset )
        right_triangles.append(newtri)
    triangles = list(left_triangles) + right_triangles

    right_hex_faces = []
    for face in left_hex_faces:
        newface = []
        for v in face:
            newface.append( cgtypes.vec3((v.x,-v.y,v.z)) )
        right_hex_faces.append(newface)
    hex_faces = list(left_hex_faces) + right_hex_faces

    ###############################

    receptor_dir_slicer = {None:slice(0,len(receptor_dirs),1),
                           'left':slice(0,right_idx_offset,1),
                           'right':slice(right_idx_offset,len(receptor_dirs),1)}

    ###############################

    print 'calculating interommatidial distances'
    delta_phi = get_mean_interommatidial_distance(receptor_dirs,triangles)
    delta_rho_q = numpy.asarray(delta_phi) * 1.1 # rough approximation. follows from caption of Fig. 18, Buchner, 1984 (in Ali)

    # make optical lowpass filters

    print 'calculating weight_maps...'
    weight_maps_64 = make_receptor_sensitivities( receptor_dirs,
                                                  delta_rho_q=delta_rho_q,
                                                  res=64 )
    print 'done'

    clip_thresh=1e-5
    floattype=numpy.float32
    tmp_weights = flatten_cubemap( weight_maps_64[0] ) # get first one to take size

    n_receptors = len(receptor_dirs)
    len_wm = len(tmp_weights)

    print 'allocating memory...'
    bigmat_64 = numpy.zeros( (n_receptors, len_wm), dtype=floattype )
    print 'done'

    print 'flattening, clipping, casting...'
    for i, weight_cubemap in enumerate(weight_maps_64):
        weights = flatten_cubemap( weight_cubemap )
        if clip_thresh is not None:
            weights = numpy.choose(weights<clip_thresh,(weights,0))
        bigmat_64[i,:] = weights.astype( bigmat_64.dtype )
    print 'done'

    print 'worst gain (should be unity)',min(numpy.sum( bigmat_64, axis=1))
    print 'filling spmat_64...'
    sys.stdout.flush()
    spmat_64 = scipy.sparse.csc_matrix(bigmat_64)
    print 'done'

    M,N = bigmat_64.shape
    print 'Compressed to %d of %d'%(len(spmat_64.data),M*N)

    ######################

    fd = open('receptor_directions_buchner71.csv','w')
    writer = csv.writer( fd )
    for row in receptor_dirs:
        writer.writerow( row )
    fd.close()

    fd = open('precomputed_buchner71.py','wb')
    fd.write( '# Automatically generated by %s\n'%os.path.split(__name__)[-1])
    fd.write( 'import numpy\n')
    fd.write( 'import scipy.sparse\n')
    fd.write( 'import scipy.io\n')
    fd.write( 'import os\n')
    fd.write( 'datadir = os.path.split(__file__)[0]\n')
    fd.write( 'cube_order = %s\n'%repr(cube_order) )
    fd.write( 'from cgtypes import vec3, quat #cgkit 1.x\n')
    save_as_python(fd, receptor_dir_slicer, 'receptor_dir_slicer',
                   fname_extra='_buchner71' )
    save_as_python(fd, spmat_64, 'receptor_weight_matrix_64', fname_extra='_buchner71' )
    save_as_python(fd, map(make_repr_able,receptor_dirs), 'receptor_dirs', fname_extra='_buchner71' )
    st = [ tuple(t) for t in triangles]
    save_as_python(fd, st,  'triangles', fname_extra='_buchner_1971' )
    save_as_python(fd, map(make_repr_able,hex_faces), 'hex_faces', fname_extra='_buchner_1971' )
    fd.write( '\n')
    fd.write( '\n')
    fd.write( '\n')

    extra = open('plot_receptors_vtk.py','r').read()
    fd.write( extra )
    fd.close()

if __name__=='__main__':
    #plot_stuff()
    main()
